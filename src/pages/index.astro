---
import Form from '../components/Form.astro'
import PasswordContainer from '../components/PasswordContainer.astro'
import IconGithub from '../Icons/IconGithub.astro'
---

<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <link
      rel='icon'
      type='image/svg+xml'
      href='/favicon.svg'
    />
    <meta
      name='viewport'
      content='width=device-width'
    />
    <meta
      name='generator'
      content={Astro.generator}
    />
    <title>Password generator</title>
  </head>
  <body>
    <main
      class='flex items-center justify-center w-[100vw] h-[100dvh] flex-col gap-6 bg-gray-800'
    >
      <a
        class='text-white text-2xl absolute top-4 right-4'
        href='https://github.com/guillermo403/password-generator'
        target='_blank'
      >
        <IconGithub />
      </a>

      <Form />
      <PasswordContainer />
    </main>
  </body>
</html>

<script>
  import Toastify from 'toastify-js'
  import 'toastify-js/src/toastify.css'

  const letrasMayusculas = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
  const letrasMinusculas = 'abcdefghijklmnopqrstuvwxyz'
  const numeros = '0123456789'
  const simbolos = '!@#$%^&*()_+~`|}{[]:;?><,./-='

  const $password = document.querySelector('span#password') as HTMLSpanElement
  const $passwordContainer = document.querySelector(
    'div#password-container'
  ) as HTMLDivElement
  const $copyButton = document.querySelector('button#copy-button')

  $copyButton?.addEventListener('click', handleCopy)
  document.querySelector('form')?.addEventListener('submit', handleSubmit)

  const CHARS_OPTIONS = {
    lowercase: 'lowercase',
    uppercase: 'uppercase',
    numbers: 'numbers',
    symbols: 'symbols'
  }
  const passOptions: {
    charsToUse: string[]
    length: number
  } = {
    charsToUse: [],
    length: 0
  }

  function handleSubmit(ev: Event) {
    ev.preventDefault()
    const $form = ev.target as HTMLFormElement
    const formData = new FormData($form)
    const data = Object.fromEntries(formData)
    const validChars = document.querySelectorAll(
      "input[name='valid-characters']:checked"
    ) as NodeListOf<HTMLInputElement>
    validChars.forEach((input) => {
      const value = input.value as keyof typeof CHARS_OPTIONS
      if (value in CHARS_OPTIONS)
        passOptions.charsToUse.push(CHARS_OPTIONS[value])
    })

    if (data['pass-length'] && !isNaN(Number(data['pass-length'])))
      passOptions.length = Number(data['pass-length'])
    else passOptions.length = 8

    handleGenerate()
  }

  function handleGenerate() {
    const charMap = {
      [CHARS_OPTIONS.lowercase]: letrasMinusculas,
      [CHARS_OPTIONS.uppercase]: letrasMayusculas,
      [CHARS_OPTIONS.numbers]: numeros,
      [CHARS_OPTIONS.symbols]: simbolos
    }

    let todosCaracteres = ''
    let password = ''

    for (const option of passOptions.charsToUse) {
      const chars = charMap[option]
      if (chars) {
        todosCaracteres += chars
        password += chars[Math.floor(Math.random() * chars.length)]
      }
    }

    for (let i = password.length; i < passOptions.length; i++) {
      password +=
        todosCaracteres[Math.floor(Math.random() * todosCaracteres.length)]
    }

    password
      .split('')
      .sort(() => {
        return 0.5 - Math.random()
      })
      .join('')
    if (password.length > passOptions.length)
      password = password.slice(0, passOptions.length)
    $password.textContent = password
    $passwordContainer.classList.remove('invisible')

    passOptions.charsToUse = []
    passOptions.length = 0

    handleCopy()
  }

  function handleCopy() {
    navigator.clipboard.writeText($password.textContent ?? '')
    Toastify({
      text: 'Password copied to clipboard',
      duration: 3000,
      gravity: 'top',
      position: 'center',
      style: {
        background: 'linear-gradient(to right, #00b09b, #96c93d)'
      }
    }).showToast()
  }
</script>
